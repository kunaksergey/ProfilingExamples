<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (6,612 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="10.0" y="419.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>com/luxoft/example1/Example.main (6,605 samples, 99.89%)</title><rect x="10.9" y="467.0" width="1178.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="478.0">com/luxoft/example1/Example.main</text>
</g>
<g>
<title>com/luxoft/example1/Example.start (6,604 samples, 99.88%)</title><rect x="10.9" y="451.0" width="1178.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="462.0">com/luxoft/example1/Example.start</text>
</g>
<g>
<title>java/io/PrintStream.println (6,601 samples, 99.83%)</title><rect x="11.4" y="435.0" width="1178.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.4" y="446.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.newLine (3,237 samples, 48.96%)</title><rect x="22.8" y="419.0" width="577.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.8" y="430.0">java/io/PrintStream.newLine</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (95 samples, 1.44%)</title><rect x="29.5" y="403.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.5" y="414.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (13 samples, 0.20%)</title><rect x="44.1" y="387.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.1" y="398.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (13 samples, 0.20%)</title><rect x="44.1" y="371.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (4 samples, 0.06%)</title><rect x="45.7" y="355.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.7" y="366.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (270 samples, 4.08%)</title><rect x="46.4" y="403.0" width="48.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.4" y="414.0">java..</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (182 samples, 2.75%)</title><rect x="62.1" y="387.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.1" y="398.0">ja..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (180 samples, 2.72%)</title><rect x="62.5" y="371.0" width="32.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.5" y="382.0">su..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (104 samples, 1.57%)</title><rect x="76.0" y="355.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (104 samples, 1.57%)</title><rect x="76.0" y="339.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.0" y="350.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (104 samples, 1.57%)</title><rect x="76.0" y="323.0" width="18.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (4 samples, 0.06%)</title><rect x="77.6" y="307.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (91 samples, 1.38%)</title><rect x="78.4" y="307.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (40 samples, 0.60%)</title><rect x="87.5" y="291.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.5" y="302.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.newLine (82 samples, 1.24%)</title><rect x="94.6" y="403.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.6" y="414.0"></text>
</g>
<g>
<title>java/io/Writer.write (82 samples, 1.24%)</title><rect x="94.6" y="387.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.6" y="398.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.write (82 samples, 1.24%)</title><rect x="94.6" y="371.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.6" y="382.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (5 samples, 0.08%)</title><rect x="108.3" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="111.3" y="366.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (2,753 samples, 41.64%)</title><rect x="109.2" y="403.0" width="491.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.2" y="414.0">java/io/OutputStreamWriter.flushBuffer</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (2 samples, 0.03%)</title><rect x="110.3" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (2,745 samples, 41.52%)</title><rect x="110.7" y="387.0" width="489.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.7" y="398.0">sun/nio/cs/StreamEncoder.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (2,717 samples, 41.09%)</title><rect x="115.7" y="371.0" width="484.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.7" y="382.0">sun/nio/cs/StreamEncoder.implFlushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (2,717 samples, 41.09%)</title><rect x="115.7" y="355.0" width="484.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.7" y="366.0">sun/nio/cs/StreamEncoder.writeBytes</text>
</g>
<g>
<title>java/io/PrintStream.write (2,658 samples, 40.20%)</title><rect x="126.2" y="339.0" width="474.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="129.2" y="350.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2,562 samples, 38.75%)</title><rect x="137.6" y="323.0" width="457.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.6" y="334.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2,501 samples, 37.83%)</title><rect x="148.5" y="307.0" width="446.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="151.5" y="318.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/io/FileOutputStream.write (2,501 samples, 37.83%)</title><rect x="148.5" y="291.0" width="446.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.5" y="302.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (2,455 samples, 37.13%)</title><rect x="152.2" y="275.0" width="438.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.2" y="286.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (676 samples, 10.22%)</title><rect x="164.0" y="259.0" width="120.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="167.0" y="270.0">Java_java_io_Fi..</text>
</g>
<g>
<title>jni_ExceptionOccurred (5 samples, 0.08%)</title><rect x="164.9" y="243.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="167.9" y="254.0"></text>
</g>
<g>
<title>jni_GetArrayLength (8 samples, 0.12%)</title><rect x="165.8" y="243.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="168.8" y="254.0"></text>
</g>
<g>
<title>jni_GetObjectField (12 samples, 0.18%)</title><rect x="167.4" y="243.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="170.4" y="254.0"></text>
</g>
<g>
<title>writeBytes (645 samples, 9.75%)</title><rect x="169.5" y="243.0" width="115.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="172.5" y="254.0">writeBytes</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (11 samples, 0.17%)</title><rect x="172.9" y="227.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="175.9" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (6 samples, 0.09%)</title><rect x="174.9" y="227.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="177.9" y="238.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (6 samples, 0.09%)</title><rect x="176.0" y="227.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="179.0" y="238.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.08%)</title><rect x="177.0" y="227.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="180.0" y="238.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="177.9" y="227.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="180.9" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="178.3" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="181.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (5 samples, 0.08%)</title><rect x="178.6" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="181.6" y="238.0"></text>
</g>
<g>
<title>__memmove_ssse3 (4 samples, 0.06%)</title><rect x="179.5" y="227.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="182.5" y="238.0"></text>
</g>
<g>
<title>_init (3 samples, 0.05%)</title><rect x="180.3" y="227.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="183.3" y="238.0"></text>
</g>
<g>
<title>handleWrite (6 samples, 0.09%)</title><rect x="181.0" y="227.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="184.0" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (86 samples, 1.30%)</title><rect x="182.0" y="227.0" width="15.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="185.0" y="238.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (6 samples, 0.09%)</title><rect x="184.4" y="211.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="187.4" y="222.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.09%)</title><rect x="185.4" y="211.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="188.4" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (33 samples, 0.50%)</title><rect x="186.5" y="211.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="189.5" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (28 samples, 0.42%)</title><rect x="192.4" y="211.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="195.4" y="222.0"></text>
</g>
<g>
<title>jni_GetArrayLength (104 samples, 1.57%)</title><rect x="197.4" y="227.0" width="18.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="200.4" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (32 samples, 0.48%)</title><rect x="198.8" y="211.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="201.8" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (64 samples, 0.97%)</title><rect x="204.5" y="211.0" width="11.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="207.5" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (148 samples, 2.24%)</title><rect x="215.9" y="227.0" width="26.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="218.9" y="238.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (30 samples, 0.45%)</title><rect x="218.4" y="211.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="221.4" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (34 samples, 0.51%)</title><rect x="224.0" y="211.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="227.0" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (57 samples, 0.86%)</title><rect x="230.0" y="211.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="233.0" y="222.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (11 samples, 0.17%)</title><rect x="240.2" y="211.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="243.2" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.06%)</title><rect x="241.5" y="195.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="244.5" y="206.0"></text>
</g>
<g>
<title>jni_GetObjectField (225 samples, 3.40%)</title><rect x="242.4" y="227.0" width="40.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="245.4" y="238.0">jni..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (12 samples, 0.18%)</title><rect x="247.9" y="211.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="250.9" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (27 samples, 0.41%)</title><rect x="250.0" y="211.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="253.0" y="222.0"></text>
</g>
<g>
<title>AccessBarrierSupport::resolve_unknown_oop_ref_strength(unsigned long, oopDesc*, long) (14 samples, 0.21%)</title><rect x="251.5" y="195.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="254.5" y="206.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (6 samples, 0.09%)</title><rect x="252.9" y="179.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="255.9" y="190.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (5 samples, 0.08%)</title><rect x="254.0" y="195.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="257.0" y="206.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (12 samples, 0.18%)</title><rect x="254.9" y="211.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="257.9" y="222.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (35 samples, 0.53%)</title><rect x="257.0" y="211.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="260.0" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (61 samples, 0.92%)</title><rect x="263.2" y="211.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="266.2" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (47 samples, 0.71%)</title><rect x="274.1" y="211.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="277.1" y="222.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (6 samples, 0.09%)</title><rect x="282.5" y="227.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="285.5" y="238.0"></text>
</g>
<g>
<title>write (6 samples, 0.09%)</title><rect x="283.6" y="227.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="286.6" y="238.0"></text>
</g>
<g>
<title>[unknown] (1,711 samples, 25.88%)</title><rect x="284.7" y="259.0" width="305.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="287.7" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,711 samples, 25.88%)</title><rect x="284.7" y="243.0" width="305.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="287.7" y="254.0">[unknown]</text>
</g>
<g>
<title>__libc_disable_asynccancel (40 samples, 0.60%)</title><rect x="284.7" y="227.0" width="7.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="287.7" y="238.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (22 samples, 0.33%)</title><rect x="291.8" y="227.0" width="3.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="294.8" y="238.0"></text>
</g>
<g>
<title>write (1,649 samples, 24.94%)</title><rect x="295.7" y="227.0" width="294.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="298.7" y="238.0">write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,458 samples, 22.05%)</title><rect x="329.8" y="211.0" width="260.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="332.8" y="222.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_write (9 samples, 0.14%)</title><rect x="329.8" y="195.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="332.8" y="206.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.15%)</title><rect x="331.4" y="195.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="334.4" y="206.0"></text>
</g>
<g>
<title>do_syscall_64 (1,439 samples, 21.76%)</title><rect x="333.2" y="195.0" width="256.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="336.2" y="206.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (1,201 samples, 18.16%)</title><rect x="375.3" y="179.0" width="214.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="378.3" y="190.0">__x64_sys_write</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.05%)</title><rect x="375.5" y="163.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="378.5" y="174.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="376.0" y="163.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="379.0" y="174.0"></text>
</g>
<g>
<title>ksys_write (1,192 samples, 18.03%)</title><rect x="376.4" y="163.0" width="212.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="379.4" y="174.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (64 samples, 0.97%)</title><rect x="381.4" y="147.0" width="11.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="384.4" y="158.0"></text>
</g>
<g>
<title>__fget_light (62 samples, 0.94%)</title><rect x="381.7" y="131.0" width="11.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="384.7" y="142.0"></text>
</g>
<g>
<title>__fget (61 samples, 0.92%)</title><rect x="381.9" y="115.0" width="10.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="384.9" y="126.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="392.8" y="147.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="395.8" y="158.0"></text>
</g>
<g>
<title>__vfs_write (3 samples, 0.05%)</title><rect x="393.5" y="147.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="396.5" y="158.0"></text>
</g>
<g>
<title>fput (48 samples, 0.73%)</title><rect x="394.1" y="147.0" width="8.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="397.1" y="158.0"></text>
</g>
<g>
<title>fsnotify (4 samples, 0.06%)</title><rect x="402.6" y="147.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="405.6" y="158.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.03%)</title><rect x="403.3" y="147.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="406.3" y="158.0"></text>
</g>
<g>
<title>vfs_write (1,039 samples, 15.71%)</title><rect x="403.7" y="147.0" width="185.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="406.7" y="158.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (16 samples, 0.24%)</title><rect x="407.6" y="131.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="410.6" y="142.0"></text>
</g>
<g>
<title>__vfs_write (901 samples, 13.63%)</title><rect x="410.5" y="131.0" width="160.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="413.5" y="142.0">__vfs_write</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (12 samples, 0.18%)</title><rect x="413.0" y="115.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="416.0" y="126.0"></text>
</g>
<g>
<title>iov_iter_init (24 samples, 0.36%)</title><rect x="415.1" y="115.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="418.1" y="126.0"></text>
</g>
<g>
<title>new_sync_write (843 samples, 12.75%)</title><rect x="419.4" y="115.0" width="150.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="422.4" y="126.0">new_sync_write</text>
</g>
<g>
<title>__sb_start_write (4 samples, 0.06%)</title><rect x="423.5" y="99.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="426.5" y="110.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.03%)</title><rect x="424.2" y="99.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="427.2" y="110.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.09%)</title><rect x="424.6" y="99.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="427.6" y="110.0"></text>
</g>
<g>
<title>generic_pipe_buf_confirm (2 samples, 0.03%)</title><rect x="426.0" y="99.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="429.0" y="110.0"></text>
</g>
<g>
<title>iov_iter_init (11 samples, 0.17%)</title><rect x="426.4" y="99.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="429.4" y="110.0"></text>
</g>
<g>
<title>mutex_lock (7 samples, 0.11%)</title><rect x="428.5" y="99.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="431.5" y="110.0"></text>
</g>
<g>
<title>mutex_unlock (7 samples, 0.11%)</title><rect x="429.7" y="99.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="432.7" y="110.0"></text>
</g>
<g>
<title>pipe_write (778 samples, 11.77%)</title><rect x="431.0" y="99.0" width="138.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="434.0" y="110.0">pipe_write</text>
</g>
<g>
<title>__sb_end_write (8 samples, 0.12%)</title><rect x="439.6" y="83.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="442.6" y="94.0"></text>
</g>
<g>
<title>__sb_start_write (6 samples, 0.09%)</title><rect x="441.0" y="83.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="444.0" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 0.09%)</title><rect x="442.1" y="83.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="445.1" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (128 samples, 1.94%)</title><rect x="443.1" y="83.0" width="22.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="446.1" y="94.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (128 samples, 1.94%)</title><rect x="443.1" y="67.0" width="22.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="446.1" y="78.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="445.6" y="51.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="448.6" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (112 samples, 1.69%)</title><rect x="446.0" y="51.0" width="20.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="449.0" y="62.0"></text>
</g>
<g>
<title>_cond_resched (3 samples, 0.05%)</title><rect x="466.0" y="83.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="469.0" y="94.0"></text>
</g>
<g>
<title>copy_page_from_iter (53 samples, 0.80%)</title><rect x="466.5" y="83.0" width="9.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="469.5" y="94.0"></text>
</g>
<g>
<title>_cond_resched (6 samples, 0.09%)</title><rect x="469.9" y="67.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="472.9" y="78.0"></text>
</g>
<g>
<title>rcu_all_qs (3 samples, 0.05%)</title><rect x="470.4" y="51.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="473.4" y="62.0"></text>
</g>
<g>
<title>copy_user_generic_string (26 samples, 0.39%)</title><rect x="471.0" y="67.0" width="4.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="474.0" y="78.0"></text>
</g>
<g>
<title>file_update_time (49 samples, 0.74%)</title><rect x="476.1" y="83.0" width="8.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="479.1" y="94.0"></text>
</g>
<g>
<title>current_time (21 samples, 0.32%)</title><rect x="479.9" y="67.0" width="3.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="482.9" y="78.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (5 samples, 0.08%)</title><rect x="481.3" y="51.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="484.3" y="62.0"></text>
</g>
<g>
<title>timespec64_trunc (8 samples, 0.12%)</title><rect x="482.2" y="51.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="485.2" y="62.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (3 samples, 0.05%)</title><rect x="483.6" y="67.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="486.6" y="78.0"></text>
</g>
<g>
<title>timespec64_trunc (4 samples, 0.06%)</title><rect x="484.2" y="67.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="487.2" y="78.0"></text>
</g>
<g>
<title>mutex_lock (322 samples, 4.87%)</title><rect x="484.9" y="83.0" width="57.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="487.9" y="94.0">mutex_..</text>
</g>
<g>
<title>__mutex_lock_slowpath (141 samples, 2.13%)</title><rect x="512.6" y="67.0" width="25.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="515.6" y="78.0">_..</text>
</g>
<g>
<title>__mutex_lock.isra.9 (137 samples, 2.07%)</title><rect x="512.6" y="51.0" width="24.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="515.6" y="62.0">_..</text>
</g>
<g>
<title>mutex_spin_on_owner (12 samples, 0.18%)</title><rect x="524.7" y="35.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="527.7" y="46.0"></text>
</g>
<g>
<title>osq_lock (38 samples, 0.57%)</title><rect x="526.8" y="35.0" width="6.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="529.8" y="46.0"></text>
</g>
<g>
<title>osq_unlock (19 samples, 0.29%)</title><rect x="533.6" y="35.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="536.6" y="46.0"></text>
</g>
<g>
<title>mutex_spin_on_owner (2 samples, 0.03%)</title><rect x="537.0" y="51.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="540.0" y="62.0"></text>
</g>
<g>
<title>_cond_resched (21 samples, 0.32%)</title><rect x="537.7" y="67.0" width="3.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="540.7" y="78.0"></text>
</g>
<g>
<title>rcu_all_qs (17 samples, 0.26%)</title><rect x="538.4" y="51.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="541.4" y="62.0"></text>
</g>
<g>
<title>rcu_all_qs (5 samples, 0.08%)</title><rect x="541.5" y="67.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="544.5" y="78.0"></text>
</g>
<g>
<title>mutex_unlock (154 samples, 2.33%)</title><rect x="542.4" y="83.0" width="27.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="545.4" y="94.0">m..</text>
</g>
<g>
<title>pipe_write (8 samples, 0.12%)</title><rect x="569.8" y="115.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="572.8" y="126.0"></text>
</g>
<g>
<title>fsnotify (31 samples, 0.47%)</title><rect x="571.3" y="131.0" width="5.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="574.3" y="142.0"></text>
</g>
<g>
<title>rw_verify_area (66 samples, 1.00%)</title><rect x="577.0" y="131.0" width="11.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="580.0" y="142.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.11%)</title><rect x="577.5" y="115.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="580.5" y="126.0"></text>
</g>
<g>
<title>apparmor_file_permission (5 samples, 0.08%)</title><rect x="578.8" y="115.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="581.8" y="126.0"></text>
</g>
<g>
<title>security_file_permission (51 samples, 0.77%)</title><rect x="579.7" y="115.0" width="9.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="582.7" y="126.0"></text>
</g>
<g>
<title>apparmor_file_permission (28 samples, 0.42%)</title><rect x="581.8" y="99.0" width="5.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="584.8" y="110.0"></text>
</g>
<g>
<title>common_file_perm (26 samples, 0.39%)</title><rect x="582.2" y="83.0" width="4.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="585.2" y="94.0"></text>
</g>
<g>
<title>aa_file_perm (16 samples, 0.24%)</title><rect x="583.9" y="67.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="586.9" y="78.0"></text>
</g>
<g>
<title>common_file_perm (11 samples, 0.17%)</title><rect x="586.8" y="99.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="589.8" y="110.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.03%)</title><rect x="588.8" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="591.8" y="142.0"></text>
</g>
<g>
<title>vfs_write (3 samples, 0.05%)</title><rect x="589.1" y="163.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="592.1" y="174.0"></text>
</g>
<g>
<title>ksys_write (2 samples, 0.03%)</title><rect x="589.6" y="179.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="592.6" y="190.0"></text>
</g>
<g>
<title>writeBytes (2 samples, 0.03%)</title><rect x="590.0" y="259.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="593.0" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.05%)</title><rect x="590.4" y="275.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="593.4" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (22 samples, 0.33%)</title><rect x="590.9" y="275.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="593.9" y="286.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (32 samples, 0.48%)</title><rect x="594.8" y="323.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.8" y="334.0"></text>
</g>
<g>
<title>java/io/PrintStream.print (3,300 samples, 49.91%)</title><rect x="600.5" y="419.0" width="589.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.5" y="430.0">java/io/PrintStream.print</text>
</g>
<g>
<title>java/io/PrintStream.write (3,270 samples, 49.46%)</title><rect x="605.4" y="403.0" width="583.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.4" y="414.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (267 samples, 4.04%)</title><rect x="616.4" y="387.0" width="47.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.4" y="398.0">java..</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (186 samples, 2.81%)</title><rect x="630.9" y="371.0" width="33.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.9" y="382.0">ja..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (186 samples, 2.81%)</title><rect x="630.9" y="355.0" width="33.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.9" y="366.0">su..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (119 samples, 1.80%)</title><rect x="642.8" y="339.0" width="21.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.8" y="350.0">s..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (119 samples, 1.80%)</title><rect x="642.8" y="323.0" width="21.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.8" y="334.0">s..</text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (119 samples, 1.80%)</title><rect x="642.8" y="307.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.8" y="318.0">j..</text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (15 samples, 0.23%)</title><rect x="643.7" y="291.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (99 samples, 1.50%)</title><rect x="646.4" y="291.0" width="17.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (43 samples, 0.65%)</title><rect x="656.4" y="275.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.4" y="286.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (2,827 samples, 42.76%)</title><rect x="664.1" y="387.0" width="504.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.1" y="398.0">java/io/OutputStreamWriter.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (2,819 samples, 42.63%)</title><rect x="665.5" y="371.0" width="503.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="668.5" y="382.0">sun/nio/cs/StreamEncoder.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (2,781 samples, 42.06%)</title><rect x="672.3" y="355.0" width="496.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="675.3" y="366.0">sun/nio/cs/StreamEncoder.implFlushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (2,781 samples, 42.06%)</title><rect x="672.3" y="339.0" width="496.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.3" y="350.0">sun/nio/cs/StreamEncoder.writeBytes</text>
</g>
<g>
<title>java/io/PrintStream.write (2,715 samples, 41.06%)</title><rect x="684.1" y="323.0" width="484.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.1" y="334.0">java/io/PrintStream.write</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2,621 samples, 39.64%)</title><rect x="695.8" y="307.0" width="467.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.8" y="318.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2,533 samples, 38.31%)</title><rect x="711.5" y="291.0" width="452.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.5" y="302.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/io/FileOutputStream.write (2,533 samples, 38.31%)</title><rect x="711.5" y="275.0" width="452.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.5" y="286.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (2,493 samples, 37.70%)</title><rect x="716.0" y="259.0" width="444.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.0" y="270.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (674 samples, 10.19%)</title><rect x="727.8" y="243.0" width="120.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="730.8" y="254.0">Java_java_io_Fi..</text>
</g>
<g>
<title>jni_ExceptionOccurred (2 samples, 0.03%)</title><rect x="728.7" y="227.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="731.7" y="238.0"></text>
</g>
<g>
<title>jni_GetArrayLength (6 samples, 0.09%)</title><rect x="729.0" y="227.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="732.0" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="730.1" y="227.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="733.1" y="238.0"></text>
</g>
<g>
<title>jni_GetObjectField (9 samples, 0.14%)</title><rect x="730.6" y="227.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="733.6" y="238.0"></text>
</g>
<g>
<title>writeBytes (649 samples, 9.82%)</title><rect x="732.2" y="227.0" width="115.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="735.2" y="238.0">writeBytes</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (9 samples, 0.14%)</title><rect x="736.3" y="211.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="739.3" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (8 samples, 0.12%)</title><rect x="738.0" y="211.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.0" y="222.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.08%)</title><rect x="739.4" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="742.4" y="222.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.08%)</title><rect x="740.3" y="211.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="743.3" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="741.3" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="744.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.05%)</title><rect x="741.7" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.7" y="222.0"></text>
</g>
<g>
<title>__memmove_ssse3 (13 samples, 0.20%)</title><rect x="742.2" y="211.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="745.2" y="222.0"></text>
</g>
<g>
<title>handleWrite (9 samples, 0.14%)</title><rect x="744.7" y="211.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="747.7" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (76 samples, 1.15%)</title><rect x="746.3" y="211.0" width="13.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="749.3" y="222.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.08%)</title><rect x="748.5" y="195.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="751.5" y="206.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (5 samples, 0.08%)</title><rect x="749.4" y="195.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="752.4" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (19 samples, 0.29%)</title><rect x="750.3" y="195.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.3" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (35 samples, 0.53%)</title><rect x="753.7" y="195.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="756.7" y="206.0"></text>
</g>
<g>
<title>jni_GetArrayLength (97 samples, 1.47%)</title><rect x="759.9" y="211.0" width="17.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="762.9" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (34 samples, 0.51%)</title><rect x="760.6" y="195.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.6" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (59 samples, 0.89%)</title><rect x="766.7" y="195.0" width="10.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="769.7" y="206.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (129 samples, 1.95%)</title><rect x="777.2" y="211.0" width="23.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="780.2" y="222.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (17 samples, 0.26%)</title><rect x="779.5" y="195.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="782.5" y="206.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="782.6" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="785.6" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (40 samples, 0.60%)</title><rect x="782.9" y="195.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="785.9" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (43 samples, 0.65%)</title><rect x="790.1" y="195.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="793.1" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (13 samples, 0.20%)</title><rect x="797.7" y="195.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="800.7" y="206.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="799.7" y="179.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.7" y="190.0"></text>
</g>
<g>
<title>jni_GetObjectField (257 samples, 3.89%)</title><rect x="800.2" y="211.0" width="45.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="803.2" y="222.0">jni_..</text>
</g>
<g>
<title>AccessBarrierSupport::resolve_unknown_oop_ref_strength(unsigned long, oopDesc*, long) (2 samples, 0.03%)</title><rect x="805.6" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="808.6" y="206.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (5 samples, 0.08%)</title><rect x="805.9" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.9" y="206.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ul&gt;::oop_access_barrier(oopDesc*, long) (21 samples, 0.32%)</title><rect x="806.8" y="195.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="809.8" y="206.0"></text>
</g>
<g>
<title>AccessBarrierSupport::resolve_unknown_oop_ref_strength(unsigned long, oopDesc*, long) (10 samples, 0.15%)</title><rect x="807.9" y="179.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="810.9" y="190.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (2 samples, 0.03%)</title><rect x="809.3" y="163.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.3" y="174.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (5 samples, 0.08%)</title><rect x="809.7" y="179.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="812.7" y="190.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (13 samples, 0.20%)</title><rect x="810.6" y="195.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.6" y="206.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (31 samples, 0.47%)</title><rect x="812.9" y="195.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.9" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (91 samples, 1.38%)</title><rect x="818.4" y="195.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="821.4" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (64 samples, 0.97%)</title><rect x="834.7" y="195.0" width="11.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="837.7" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.08%)</title><rect x="846.1" y="211.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.1" y="222.0"></text>
</g>
<g>
<title>write (6 samples, 0.09%)</title><rect x="847.0" y="211.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="850.0" y="222.0"></text>
</g>
<g>
<title>__GI___read_nocancel (1,751 samples, 26.48%)</title><rect x="848.1" y="243.0" width="312.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="851.1" y="254.0">__GI___read_nocancel</text>
</g>
<g>
<title>__libc_disable_asynccancel (39 samples, 0.59%)</title><rect x="848.1" y="227.0" width="6.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="851.1" y="238.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (36 samples, 0.54%)</title><rect x="855.0" y="227.0" width="6.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="858.0" y="238.0"></text>
</g>
<g>
<title>write (1,676 samples, 25.35%)</title><rect x="861.4" y="227.0" width="299.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="864.4" y="238.0">write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,497 samples, 22.64%)</title><rect x="893.4" y="211.0" width="267.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="896.4" y="222.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_write (4 samples, 0.06%)</title><rect x="893.4" y="195.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="896.4" y="206.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.12%)</title><rect x="894.1" y="195.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="897.1" y="206.0"></text>
</g>
<g>
<title>do_syscall_64 (1,485 samples, 22.46%)</title><rect x="895.5" y="195.0" width="265.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="898.5" y="206.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (1,270 samples, 19.21%)</title><rect x="933.5" y="179.0" width="226.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="936.5" y="190.0">__x64_sys_write</text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.03%)</title><rect x="933.5" y="163.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="936.5" y="174.0"></text>
</g>
<g>
<title>fput (3 samples, 0.05%)</title><rect x="933.9" y="163.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="936.9" y="174.0"></text>
</g>
<g>
<title>ksys_write (1,262 samples, 19.09%)</title><rect x="934.4" y="163.0" width="225.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="937.4" y="174.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (61 samples, 0.92%)</title><rect x="938.7" y="147.0" width="10.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="941.7" y="158.0"></text>
</g>
<g>
<title>__fget_light (60 samples, 0.91%)</title><rect x="938.9" y="131.0" width="10.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="941.9" y="142.0"></text>
</g>
<g>
<title>__fget (58 samples, 0.88%)</title><rect x="939.3" y="115.0" width="10.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="942.3" y="126.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="949.6" y="147.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="952.6" y="158.0"></text>
</g>
<g>
<title>__fsnotify_parent (3 samples, 0.05%)</title><rect x="950.0" y="147.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="953.0" y="158.0"></text>
</g>
<g>
<title>__vfs_write (2 samples, 0.03%)</title><rect x="950.5" y="147.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="953.5" y="158.0"></text>
</g>
<g>
<title>fput (41 samples, 0.62%)</title><rect x="950.9" y="147.0" width="7.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="953.9" y="158.0"></text>
</g>
<g>
<title>fsnotify (4 samples, 0.06%)</title><rect x="958.2" y="147.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="961.2" y="158.0"></text>
</g>
<g>
<title>vfs_write (1,124 samples, 17.00%)</title><rect x="959.1" y="147.0" width="200.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="962.1" y="158.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (11 samples, 0.17%)</title><rect x="964.4" y="131.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="967.4" y="142.0"></text>
</g>
<g>
<title>__vfs_write (977 samples, 14.78%)</title><rect x="966.4" y="131.0" width="174.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="969.4" y="142.0">__vfs_write</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.12%)</title><rect x="970.3" y="115.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="973.3" y="126.0"></text>
</g>
<g>
<title>iov_iter_init (6 samples, 0.09%)</title><rect x="971.7" y="115.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="974.7" y="126.0"></text>
</g>
<g>
<title>new_sync_write (938 samples, 14.19%)</title><rect x="972.8" y="115.0" width="167.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="975.8" y="126.0">new_sync_write</text>
</g>
<g>
<title>__sb_end_write (2 samples, 0.03%)</title><rect x="977.8" y="99.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="980.8" y="110.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.03%)</title><rect x="978.3" y="99.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="981.3" y="110.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.09%)</title><rect x="978.7" y="99.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="981.7" y="110.0"></text>
</g>
<g>
<title>copy_page_from_iter (2 samples, 0.03%)</title><rect x="979.8" y="99.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="982.8" y="110.0"></text>
</g>
<g>
<title>generic_pipe_buf_confirm (3 samples, 0.05%)</title><rect x="980.1" y="99.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="983.1" y="110.0"></text>
</g>
<g>
<title>iov_iter_init (8 samples, 0.12%)</title><rect x="980.7" y="99.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="983.7" y="110.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.06%)</title><rect x="982.1" y="99.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="985.1" y="110.0"></text>
</g>
<g>
<title>mutex_unlock (4 samples, 0.06%)</title><rect x="982.8" y="99.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="985.8" y="110.0"></text>
</g>
<g>
<title>pipe_write (878 samples, 13.28%)</title><rect x="983.5" y="99.0" width="156.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="986.5" y="110.0">pipe_write</text>
</g>
<g>
<title>__sb_end_write (4 samples, 0.06%)</title><rect x="994.9" y="83.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="997.9" y="94.0"></text>
</g>
<g>
<title>__sb_start_write (5 samples, 0.08%)</title><rect x="995.7" y="83.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="998.7" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (150 samples, 2.27%)</title><rect x="996.5" y="83.0" width="26.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="999.5" y="94.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (149 samples, 2.25%)</title><rect x="996.5" y="67.0" width="26.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="999.5" y="78.0">_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.05%)</title><rect x="998.9" y="51.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1001.9" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (133 samples, 2.01%)</title><rect x="999.4" y="51.0" width="23.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1002.4" y="62.0">_..</text>
</g>
<g>
<title>_cond_resched (10 samples, 0.15%)</title><rect x="1023.3" y="83.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1026.3" y="94.0"></text>
</g>
<g>
<title>copy_page_from_iter (86 samples, 1.30%)</title><rect x="1025.1" y="83.0" width="15.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1028.1" y="94.0"></text>
</g>
<g>
<title>_cond_resched (7 samples, 0.11%)</title><rect x="1028.5" y="67.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1031.5" y="78.0"></text>
</g>
<g>
<title>rcu_all_qs (4 samples, 0.06%)</title><rect x="1029.0" y="51.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1032.0" y="62.0"></text>
</g>
<g>
<title>copy_user_generic_string (57 samples, 0.86%)</title><rect x="1029.7" y="67.0" width="10.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1032.7" y="78.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.05%)</title><rect x="1039.9" y="67.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1042.9" y="78.0"></text>
</g>
<g>
<title>copyin (12 samples, 0.18%)</title><rect x="1040.4" y="83.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1043.4" y="94.0"></text>
</g>
<g>
<title>file_update_time (53 samples, 0.80%)</title><rect x="1042.8" y="83.0" width="9.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1045.8" y="94.0"></text>
</g>
<g>
<title>current_time (23 samples, 0.35%)</title><rect x="1047.9" y="67.0" width="4.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1050.9" y="78.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (6 samples, 0.09%)</title><rect x="1049.0" y="51.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1052.0" y="62.0"></text>
</g>
<g>
<title>timespec64_trunc (11 samples, 0.17%)</title><rect x="1050.1" y="51.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1053.1" y="62.0"></text>
</g>
<g>
<title>mutex_lock (314 samples, 4.75%)</title><rect x="1052.2" y="83.0" width="56.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1055.2" y="94.0">mutex_..</text>
</g>
<g>
<title>__mutex_lock_slowpath (135 samples, 2.04%)</title><rect x="1078.1" y="67.0" width="24.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1081.1" y="78.0">_..</text>
</g>
<g>
<title>__mutex_lock.isra.9 (132 samples, 2.00%)</title><rect x="1078.1" y="51.0" width="23.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1081.1" y="62.0">_..</text>
</g>
<g>
<title>mutex_spin_on_owner (9 samples, 0.14%)</title><rect x="1089.0" y="35.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1092.0" y="46.0"></text>
</g>
<g>
<title>osq_lock (53 samples, 0.80%)</title><rect x="1090.6" y="35.0" width="9.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1093.6" y="46.0"></text>
</g>
<g>
<title>osq_unlock (9 samples, 0.14%)</title><rect x="1100.1" y="35.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1103.1" y="46.0"></text>
</g>
<g>
<title>mutex_spin_on_owner (2 samples, 0.03%)</title><rect x="1101.7" y="51.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1104.7" y="62.0"></text>
</g>
<g>
<title>_cond_resched (27 samples, 0.41%)</title><rect x="1102.2" y="67.0" width="4.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1105.2" y="78.0"></text>
</g>
<g>
<title>rcu_all_qs (16 samples, 0.24%)</title><rect x="1104.2" y="51.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1107.2" y="62.0"></text>
</g>
<g>
<title>rcu_all_qs (7 samples, 0.11%)</title><rect x="1107.0" y="67.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1110.0" y="78.0"></text>
</g>
<g>
<title>mutex_unlock (179 samples, 2.71%)</title><rect x="1108.3" y="83.0" width="31.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1111.3" y="94.0">mu..</text>
</g>
<g>
<title>pipe_write (3 samples, 0.05%)</title><rect x="1140.2" y="115.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1143.2" y="126.0"></text>
</g>
<g>
<title>fsnotify (35 samples, 0.53%)</title><rect x="1140.7" y="131.0" width="6.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1143.7" y="142.0"></text>
</g>
<g>
<title>new_sync_write (3 samples, 0.05%)</title><rect x="1147.0" y="131.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1150.0" y="142.0"></text>
</g>
<g>
<title>rw_verify_area (68 samples, 1.03%)</title><rect x="1147.5" y="131.0" width="12.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1150.5" y="142.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.08%)</title><rect x="1148.4" y="115.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1151.4" y="126.0"></text>
</g>
<g>
<title>apparmor_file_permission (6 samples, 0.09%)</title><rect x="1149.3" y="115.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1152.3" y="126.0"></text>
</g>
<g>
<title>security_file_permission (52 samples, 0.79%)</title><rect x="1150.4" y="115.0" width="9.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1153.4" y="126.0"></text>
</g>
<g>
<title>apparmor_file_permission (31 samples, 0.47%)</title><rect x="1153.1" y="99.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1156.1" y="110.0"></text>
</g>
<g>
<title>common_file_perm (27 samples, 0.41%)</title><rect x="1153.8" y="83.0" width="4.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1156.8" y="94.0"></text>
</g>
<g>
<title>aa_file_perm (7 samples, 0.11%)</title><rect x="1157.3" y="67.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1160.3" y="78.0"></text>
</g>
<g>
<title>common_file_perm (6 samples, 0.09%)</title><rect x="1158.6" y="99.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1161.6" y="110.0"></text>
</g>
<g>
<title>vfs_write (3 samples, 0.05%)</title><rect x="1159.7" y="163.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1162.7" y="174.0"></text>
</g>
<g>
<title>ksys_write (2 samples, 0.03%)</title><rect x="1160.2" y="179.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1163.2" y="190.0"></text>
</g>
<g>
<title>writeBytes (2 samples, 0.03%)</title><rect x="1160.6" y="243.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1163.6" y="254.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="1160.9" y="259.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1163.9" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.20%)</title><rect x="1161.3" y="259.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1164.3" y="270.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (28 samples, 0.42%)</title><rect x="1163.6" y="307.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1166.6" y="318.0"></text>
</g>
<g>
<title>java/io/Writer.write (66 samples, 1.00%)</title><rect x="1168.6" y="387.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1171.6" y="398.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.write (66 samples, 1.00%)</title><rect x="1168.6" y="371.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1171.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (48 samples, 0.73%)</title><rect x="1180.4" y="387.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (48 samples, 0.73%)</title><rect x="1180.4" y="371.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (48 samples, 0.73%)</title><rect x="1180.4" y="355.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (3 samples, 0.05%)</title><rect x="1188.4" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1191.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.05%)</title><rect x="1188.9" y="403.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.05%)</title><rect x="1188.9" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.03%)</title><rect x="1189.6" y="467.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.6" y="478.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="1189.6" y="451.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1192.6" y="462.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="1189.6" y="435.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.6" y="446.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.03%)</title><rect x="1189.6" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.6" y="430.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.03%)</title><rect x="1189.6" y="403.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.6" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="1189.6" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.6" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="1189.6" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.6" y="382.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.03%)</title><rect x="1189.6" y="355.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1192.6" y="366.0"></text>
</g>
</g>
</svg>
